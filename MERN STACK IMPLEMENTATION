STEP 1 – BACKEND CONFIGURATION

sudo apt update

sudo apt upgrade

curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -

sudo apt-get install -y nodejs

mkdir Todo

cd Todo

npm init

<img width="796" alt="Screenshot 2022-01-22 at 08 16 51" src="https://user-images.githubusercontent.com/97977311/150629034-c2c9a9de-d7e8-4bf7-8fa0-fcb0d551d591.png">

npm install express

touch index.js

npm install dotenv

vim index.js
copy and paste the following line of codes into index.js using vim editor



const express = require('express');
require('dotenv').config();

const app = express();

const port = process.env.PORT || 5000;

app.use((req, res, next) => {
res.header("Access-Control-Allow-Origin", "\*");
res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use((req, res, next) => {
res.send('Welcome to Express');
});

app.listen(port, () => {
console.log(`Server running on port ${port}`)
});

Open Port 5000 in the security group of the EC2 which was specified in index.js "const port = process.env.PORT || 5000;"

<img width="1610" alt="Screenshot 2022-01-22 at 08 34 17" src="https://user-images.githubusercontent.com/97977311/150629514-742bd0c2-79c3-453b-a112-0abc76c54acb.png">

node index.js         to start node server

<img width="719" alt="Screenshot 2022-01-22 at 08 39 05" src="https://user-images.githubusercontent.com/97977311/150629586-a4ddbe23-b7ae-4356-8cb7-ca54dcb6781f.png">

open the server public address on port 5000 on the web browser.  54.172.194.132:500

<img width="719" alt="Screenshot 2022-01-22 at 08 42 26" src="https://user-images.githubusercontent.com/97977311/150629799-739ebf9e-4883-49bd-80f0-8ab0a81738ab.png">


Routes
There are three actions that our To-Do application needs to be able to do:

Create a new task
Display list of all tasks
Delete a completed task
Each task will be associated with some particular endpoint and will use different standard HTTP request methods: POST, GET, DELETE.

mkdir routes

vim api.js

const express = require ('express');
const router = express.Router();

router.get('/todos', (req, res, next) => {

});

router.post('/todos', (req, res, next) => {

});

router.delete('/todos/:id', (req, res, next) => {

})

module.exports = router;


cd to the Todo directory

npm install mongoose       install mongoDB

mkdir models

vim todo.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

//create schema for todo
const TodoSchema = new Schema({
action: {
type: String,
required: [true, 'The todo text field is required']
}
})

//create model for todo
const Todo = mongoose.model('todo', TodoSchema);

module.exports = Todo;

cd to routes directory and change the content of api.js to codes below, you can delete the current content using %d in vim editor

cd routes

vim api.js
%d
const express = require ('express');
const router = express.Router();
const Todo = require('../models/todo');

router.get('/todos', (req, res, next) => {

//this will return all the data, exposing only the id and action field to the client
Todo.find({}, 'action')
.then(data => res.json(data))
.catch(next)
});

router.post('/todos', (req, res, next) => {
if(req.body.action){
Todo.create(req.body)
.then(data => res.json(data))
.catch(next)
}else {
res.json({
error: "The input field is empty"
})
}
});

router.delete('/todos/:id', (req, res, next) => {
Todo.findOneAndDelete({"_id": req.params.id})
.then(data => res.json(data))
.catch(next)
})

module.exports = router;

in Todo directory create .env file and add connection string to the mongoDB

vim .env

DB='mongodb+srv://folbadevops:Cloud%402022@cluster0.wdi5o.mongodb.net/folbadevopsDB?retryWrites=true&w=majority'


Now we need to update the index.js to reflect the use of .env so that Node.js can connect to the database.

Simply delete existing content in the file, and update it with the entire code below

vim index.js

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const routes = require('./routes/api');
const path = require('path');
require('dotenv').config();

const app = express();

const port = process.env.PORT || 5000;

//connect to the database
mongoose.connect(process.env.DB, { useNewUrlParser: true, useUnifiedTopology: true })
.then(() => console.log(`Database connected successfully`))
.catch(err => console.log(err));

//since mongoose promise is depreciated, we overide it with node's promise
mongoose.Promise = global.Promise;

app.use((req, res, next) => {
res.header("Access-Control-Allow-Origin", "\*");
res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.use(bodyParser.json());

app.use('/api', routes);

app.use((err, req, res, next) => {
console.log(err);
next();
});

app.listen(port, () => {
console.log(`Server running on port ${port}`)
});

Start your server using the command:

node index.js

error of port 5000 already in use.
diaplay the process id of the port 5000 user with command below

sudo lsof -i tcp:5000 

kill the process with the following command

kill -9 16988      16988 is the current PID

<img width="868" alt="Screenshot 2022-01-22 at 09 49 15" src="https://user-images.githubusercontent.com/97977311/150631700-47558bb7-45e8-4d3b-9d3c-f9ce265b6030.png">
 connection to Database sucessful
 
 post and get request was sucessful on postman
 
 http://54.172.194.132:5000/api/todos   url to test api in postman
Post 1 
 {
    "action": "I am proud of  MERN project 3 acheivement"
}
post 2
{
"action": "Finally get MERN project 3"

}
 <img width="868" alt="Screenshot 2022-01-22 at 09 56 06" src="https://user-images.githubusercontent.com/97977311/150632008-a643ebb4-62f5-41d2-b783-fec707588e04.png">
<img width="887" alt="Screenshot 2022-01-22 at 09 56 32" src="https://user-images.githubusercontent.com/97977311/150632014-3423cbd5-b750-418c-831a-f124de14d992.png">

Step 2 – Frontend creation
In the Todo drectory
cd Todo
npx create-react-app client
<img width="1504" alt="Screenshot 2022-01-22 at 10 19 40" src="https://user-images.githubusercontent.com/97977311/150632751-165f6ac1-1426-45e0-a9c0-33c811972160.png">
Before testing the react app, there are some dependencies that need to be installed.

npm install concurrently --save-dev
npm install nodemon --save-dev

edit package.json code and change the content of script to code below

"scripts": {
"start": "node index.js",
"start-watch": "nodemon index.js",
"dev": "concurrently \"npm run start-watch\" \"cd client && npm start\""
},

Configure Proxy in package.json in the client directory so t possible to access the application directly from the browser by simply calling the server url like http://localhost:5000 rather than always including the entire path like http://localhost:5000/api/todos

"proxy": "http://localhost:5000",

Change to Todo directory
cd Todo
npm run dev

<img width="1680" alt="Screenshot 2022-01-22 at 10 45 48" src="https://user-images.githubusercontent.com/97977311/150633536-762f7471-ee30-4c2b-9bb8-fdd70613bb2f.png">

Your app should open and start running on localhost:3000 make sure you Open port 3000 on security group of EC2

Creating your React Components
cd client
mkdir components
touch Input.js ListTodo.js Todo.js
vim Input.js
import React, { Component } from 'react';
import axios from 'axios';

class Input extends Component {

state = {
action: ""
}

addTodo = () => {
const task = {action: this.state.action}

    if(task.action && task.action.length > 0){
      axios.post('/api/todos', task)
        .then(res => {
          if(res.data){
            this.props.getTodos();
            this.setState({action: ""})
          }
        })
        .catch(err => console.log(err))
    }else {
      console.log('input field required')
    }

}

handleChange = (e) => {
this.setState({
action: e.target.value
})
}

render() {
let { action } = this.state;
return (
<div>
<input type="text" onChange={this.handleChange} value={action} />
<button onClick={this.addTodo}>add todo</button>
</div>
)
}
}

export default Input

To make use of Axios, which is a Promise based HTTP client for the browser and node.js, you need to cd into your client from your terminal and run yarn add axios or npm install axios.
change directory to client
cd client   or using cd ..  cd..

npm install axios

cd src/components

vim ListTodo.js
import React from 'react';

const ListTodo = ({ todos, deleteTodo }) => {

return (
<ul>
{
todos &&
todos.length > 0 ?
(
todos.map(todo => {
return (
<li key={todo._id} onClick={() => deleteTodo(todo._id)}>{todo.action}</li>
)
})
)
:
(
<li>No todo(s) left</li>
)
}
</ul>
)
}

export default ListTodo


vim Todo.js

import React, {Component} from 'react';
import axios from 'axios';

import Input from './Input';
import ListTodo from './ListTodo';

class Todo extends Component {

state = {
todos: []
}

componentDidMount(){
this.getTodos();
}

getTodos = () => {
axios.get('/api/todos')
.then(res => {
if(res.data){
this.setState({
todos: res.data
})
}
})
.catch(err => console.log(err))
}

deleteTodo = (id) => {

    axios.delete(`/api/todos/${id}`)
      .then(res => {
        if(res.data){
          this.getTodos()
        }
      })
      .catch(err => console.log(err))

}

render() {
let { todos } = this.state;

    return(
      <div>
        <h1>My Todo(s)</h1>
        <Input getTodos={this.getTodos}/>
        <ListTodo todos={todos} deleteTodo={this.deleteTodo}/>
      </div>
    )

}
}

export default Todo;


We need to make little adjustment to our react code. Delete the logo and adjust our App.js to look like this.

Move to the src folder

cd src

vim App.js

import React from 'react';

import Todo from './components/Todo';
import './App.css';

const App = () => {
return (
<div className="App">
<Todo />
</div>
);
}

export default App;


vim App.css
Then paste the following code into App.css:

.App {
text-align: center;
font-size: calc(10px + 2vmin);
width: 60%;
margin-left: auto;
margin-right: auto;
}

input {
height: 40px;
width: 50%;
border: none;
border-bottom: 2px #101113 solid;
background: none;
font-size: 1.5rem;
color: #787a80;
}

input:focus {
outline: none;
}

button {
width: 25%;
height: 45px;
font-size: 25px;
background: #101113;
border-radius: 5px;
border: none;
margin-left: 10px;
color: #787a80;
cursor: pointer;
}

button:focus {
outline: none;
}

ul {
list-style: none;
text-align: left;
padding: 15px;
background: #171a1f;
border-radius: 5px;
}

li {
padding: 15px;
font-size: 1.5rem;
margin-bottom: 15px;
background: #282c34;
border-radius: 5px;
overflow-wrap: break-word;
cursor: pointer;
}

@media only screen and (min-width: 300px) {
.App {
width: 80%;
}

input {
width: 100%
}

button {
width: 100%;
margin-top: 15px;
margin-left: 0;
}
}

@media only screen and (min-width: 640px) {
.App {
width: 60%;
}

input {
width: 50%;
}

button {
width: 30%;
margin-left: 10px;
margin-top: 0;
}
}

In the src directory open the index.css

vim index.css
Copy and paste the code below:

body {
margin: 0;
padding: 0;
font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
"Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
sans-serif;
-webkit-font-smoothing: antialiased;
-moz-osx-font-smoothing: grayscale;
box-sizing: border-box;
background-color: #282c34;
color: #787a80;
}

code {
font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
monospace;
}

Change directory to 
cd Todo 
npm run dev
http://54.172.194.132:3000 visit the url to acesss todo app

<img width="1680" alt="Screenshot 2022-01-22 at 11 50 00" src="https://user-images.githubusercontent.com/97977311/150635506-684ad459-0fa8-449f-af25-9641b25c487b.png">






